/*
 *   C ECHO client example using sockets
 */
#include <stdio.h> //printf
#include <string.h>    //strlen
#include <sys/socket.h>    //socket
#include <arpa/inet.h> //inet_addr
#include <stdlib.h>

#define  DEBUG 0 //may be 0,1,2,3
#include "network.h"
#include "signals.h"
#include "speedtest.h"
#include <errno.h>
#include <unistd.h>
#include "signalhash.h"

#define Devices 40
#define SignalsPerDev 100

#define INIT 0
#define RD  1
#define WR  2
#define OK  3
#define ERR 4
/*
	 struct WriteBuffer (
	 unsigned int ID;
	 char Name[150];
	 unsigned int ExState;
	 int Value;
	 }
	 struct WriteBuffer W_B[MAX_Signals];


	 int copyW_B (char *sName, char *dName){
	 int z=0;
	 for (z=0; z< MAX_Signals; z++){
	 if (strstr(Signal_Array[z].Name, dName) != NULL)
	 {
	 W_B[z].ID=z; //fill ID
	 memcpy(W_B.Name,Signal_Array[z].Name,(sizeof(Signal_Array[z].Name)/sizeof(char))); //copy Name
	 W_B[z].ExState =Signal_Array[z].ExState;
	 W_B[z].Value = Signal_Array[z].Value;
	 }
	 }

	 return 0;
	 }
 */
unsigned int Send_ID[MAX_Signals];
struct hash_s *name_hash;
struct hash_s *prefix_hash;

int Init_Send_ID() {
	int x=0;
	for (x=0; x < MAX_Signals; x++) {
		Send_ID[x]=1;

	}
	return 0;
}

struct DeviceSignalCache {
	char DeviceName[100];
	int  Device_ID;
	char  Signals_Name[SignalsPerDev][100]; //device_name[100].signal_name[60]
	int  Signals_ID[SignalsPerDev]; 
	int  Signals_Val[SignalsPerDev];
	int  Signals_Ex[SignalsPerDev];
};

struct DeviceSignalCache DevCache[Devices]; //40 devices

int FillDevCache(){
	int i=0;
	for (i=0; i < MAX_Signals; i++)
	{
		if (strlen (Signal_Array[i].Name) > 2)
		{
			int dev;
			for (dev=0; dev < Devices; dev++)
			{

				//if device already created
				if ( DevCache[dev].Device_ID == Signal_Array[i].MB_Id ) //if empty slot for dev
				{                               
					int sign=0;
					int Last_free_index=0;
					for (sign=0; sign < SignalsPerDev; sign++){

						if ( strlen(DevCache[dev].Signals_Name[sign]) < 2 ) { //if signal slot is empty
							Last_free_index=sign; //save the index of empty slot
						}

						if ( strlen(DevCache[dev].Signals_Name[sign]) > 2 ){ //if name not empty
							//if ( strstr(DevCache[dev].Signals_Name[sign],Signal_Array[i].Name)!=NULL )// if signal is present
							//break;
						}                                    


						if ( strstr (DevCache[dev].Signals_Name[sign],Signal_Array[i].Name) == NULL ){    
							printf("Free index [%i]\n\r",Last_free_index);
							DevCache[dev].Signals_ID[Last_free_index] = i; //signal number in Signal_Array
							strcpy(DevCache[dev].Signals_Name[Last_free_index],Signal_Array[i].Name);   
							printf("EXIST->>devNum[%i] Mb_ID[%i] DEV_Name[%s] Signal_id[%i] Signal_Name[%s]\n\r ",dev,DevCache[dev].Device_ID ,DevCache[dev].DeviceName, DevCache[dev].Signals_ID[0],DevCache[dev].Signals_Name[0]);                                         
							break;
						}                  
					}
				}else{  //if not exist
					if ( strlen(DevCache[dev].DeviceName) < 2 ) //if empty slot for dev
					{
						if ( DevCache[dev].Device_ID ==0 ){
							strcpy(DevCache[dev].DeviceName,Signal_Array[i].Name);
							DevCache[dev].Device_ID = Signal_Array[i].MB_Id;
							DevCache[dev].Signals_ID[0] = i; //signal number in Signal_Array
							strcpy(DevCache[dev].Signals_Name[0],Signal_Array[i].Name);
							printf("NEW->>devNum[%i] Mb_ID[%i] DEV_Name[%s] Signal_id[%i] Signal_Name[%s]\n\r ",dev,DevCache[dev].Device_ID ,DevCache[dev].DeviceName, DevCache[dev].Signals_ID[0],DevCache[dev].Signals_Name[0]);
							break;
						}
					}

				}
			}

		}
	}
	return 0;
}

int ShowDevCache(){
	int i=0;
	printf("Show Virtual Device Cache: \n\r");
	for (i=0; i < Devices; i++){
		if (DevCache[i].Device_ID > 0){
			printf(">>>[%i]DevName[%s] DevId[%i] \n\r",i,DevCache[i].DeviceName,DevCache[i].Device_ID);
			int sign;
			for (sign=0; sign < SignalsPerDev; sign++){
				printf("[%i]Signal_id[%i] SignalName[%s]\n\r",sign,DevCache[i].Signals_ID[sign],DevCache[i].Signals_Name[sign]);     
			}
		}
	}
	return 0;
}

int sTrigger_Ex (int Signal_Array_id, char *SearchedName, int wait_ExState ){
	if ( strstr(Signal_Array[Signal_Array_id].Name,SearchedName) != NULL)
	{
		if (Signal_Array[Signal_Array_id].ExState == wait_ExState) return 1;        
	}
	return 0;
}

int sTrigger_Val (int Signal_Array_id, char *SearchedName, int wait_Val ){
	if ( strstr(Signal_Array[Signal_Array_id].Name,SearchedName) != NULL)
	{
		if (Signal_Array[Signal_Array_id].Value[1] == wait_Val) return 1;        
	}
	return 0;
}

//char SignalHash[MAX_Signals][MAX_Signals]; //array for store index of Signals

int Set_Signal_Param (int Signal_Array_id, int Ex ,int val){

	Signal_Array[Signal_Array_id].ExState = Ex;
	Signal_Array[Signal_Array_id].Value[1] = val; 
	return  0;
}

int Set_Signal_Ex (int ID, int Ex){
	// && (Signal_Array[ID].ExState!=WR)
	Send_ID[ID]=1;
	Signal_Array[ID].ExState = Ex;        
	return  0;
}

int Set_Signal_Ex_Val (char *name, int Ex, int Val){
	// && (Signal_Array[ID].ExState!=WR)
	struct Signal *s;
	s = hash_find(name_hash, Signal_Array, name);
	if(s) {
		s->ExState = Ex;
		s->Value[1] = Val;
	}
	return  0;
}

int SetVal (char *Signal, int Val, int Ex){
	struct Signal *s;
	s = hash_find(name_hash, Signal_Array, Signal);
	if(s) {
			printf(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>SETVAL Name{%s} Val{%i} Ex{%i} \n\r",s->Name,s->Value[1],s->ExState);
			s->Value[1]=Val;
			s->ExState = Ex;   	
	}

	return 0;
}


int FillSignalIndex(void){ //fill the id of signals in cyrrent signals list;

	int n=0;
	for (n=0; n < MAX_Signals; n++){
		Signal_Array[n].Srv_id_num = n;  
	}
	return 0;
}

int HashTable[4000]; //key table HASH = iindex of array and content = id signals
int FillHash(void){ //fill the id of signals in cyrrent signals list;

	int n=0;
	int h;
	for (n=0; n < MAX_Signals; n++){

		h=Hash_id(Signal_Array[n].Name );

		HashTable[h]=n;
		printf("NAME[%s] HASH[%i] id[%i] \n\r",Signal_Array[n].Name ,h,n);
	}
	return 0;
}

int mode1, mode2, control1,control2,alarm_stop1,alarm_stop2,alarm_stop3;

int get_state(){
	int state=0;
	int x = 0;
	struct Signal *s;

	s = hash_find(name_hash, Signal_Array, "485.kb.kei1.mode1");
	if(s) mode1 = s->Value[1];
	s = hash_find(name_hash, Signal_Array, "485.kb.kei1.mode2");
	if(s) mode2 = s->Value[1];
	s = hash_find(name_hash, Signal_Array, "485.kb.kei1.control1");
	if(s) control1 = s->Value[1];
	s = hash_find(name_hash, Signal_Array, "485.kb.kei1.control2");
	if(s) control2 = s->Value[1];
	s = hash_find(name_hash, Signal_Array, "485.kb.kei1.stop_alarm"); //gribok stop
	if(s) alarm_stop1 = s->Value[1];
	s = hash_find(name_hash, Signal_Array, "485.rpdu485.kei.crit_stop"); //gribok stop
	if(s) alarm_stop2 = s->Value[1];
	s = hash_find(name_hash, Signal_Array, "485.pukonv485c.kei.stop_alarm"); //gribok stop
	if(s) alarm_stop3 = s->Value[1];

	state=mode1+ mode2+ control1+control2+alarm_stop1+alarm_stop2+alarm_stop3; //state as sum of signals value
	//printf (">>>>>>>>>>>>>>>>>>>>>> MODE STATE %i | mode1 %i, mode2 %i, control1 %i,control2 %i,alarm_stop1 %i,alarm_stop2 %i,alarm_stop3 %i   \n\r",state, mode1, mode2, control1,control2,alarm_stop1,alarm_stop2,alarm_stop3);
	if ((mode1 + mode2 + control1 + control2)> 0 ) {
		state = 3;  //work
		printf(" *MODE 3 | ");
	}

	if ( ( alarm_stop1 + alarm_stop2 + alarm_stop3) > 0) {
		state = 4; //ALARM stop
		printf(" *GRIBOK STOP!!!| ");
	}

	if (DEBUG == 1)  printf (">>>>>>>>>>>>>>>>>>>>>> MODE STATE %i | mode1 %i, mode2 %i, control1 %i,control2 %i,alarm_stop1 %i,alarm_stop2 %i,alarm_stop3 %i   \n\r",state, mode1, mode2, control1,control2,alarm_stop1,alarm_stop2,alarm_stop3);

	if ((control1== 0) && ( control2==1)) state =31; //Mestno
	if ((control1== 1) && ( control2==1)) state =32; //Provod	        
	if ((control1== 1) && ( control2==0)) state =33; //Radio	        

	return state;
}


int main(int argc , char *argv[])
{

	//*************INIT SIGNALS *********************    
	printf("MAX_Signals [%i] \n",MAX_Signals);
	init_signals_list(); // erase signal lsit 

	//************* CREATE SOCKET *********************
	if (argc == 1) {
		printf("No server ip! ip:{%s} \n\r USAGE example: client.exe 192.168.1.1\n\r",argv[1]);
		return;
	}

	printf("> Server ip:{%s} \n\r",argv[1]);



	if (socket_init(argv[1]) !=0){
		printf ("No Connection to server\n\r");
		return; //return 0 if all OK else return 1
	}


	//     if (socket_init2() !=0){
	//     printf ("No Connection to server\n\r");
	//     return; //return 0 if all OK else return 1
	//     }

	//ok
	/*
		 int u=0;
		 for (u=0; u < MAX_Signals; u++) {
		 printf("1Signal preparse: Name{%s} Val0[%i]  Val1[%i] \n\r",Signal_Array[u].Name,Signal_Array[u].Value[0]  ,Signal_Array[u].Value[1]); //-48
		 }

		 return 0;
	 */

	//******************* WORK CYCLE *******************
	int delay = 0; //1 cycle 1 ms
	int tcpresult=0;
	char tst[MAX_MESS]={0};
	char packed_txt_string[MAX_MESS]={0};
	int STATE=0;
	int RqTCPSend=0;
	Init_Send_ID();
	int hash_inited = 0;

	hash_create(&name_hash);
	hash_create(&prefix_hash);

	while (1){
		printf("THIS IS LoGiC \n\r");

		speedtest_start(); //time start

		//======================== read all 485 signals from server create signals and virtual devices ===================

		memset(message, 0, sizeof(message));
		//printf("Buffer befor create Messasge: [%s] \n\r",message);
		frame_pack("rd", ".", message);
		tcpresult = frame_tcpreq(message); 
		if ( DEBUG == 1 )    printf ("tcp send result[%i]\n\r",tcpresult);	    
		if ( DEBUG == 1 )    printf("=================== ==>   SPEEDTEST Time to prepare packet: [ %ld ] ms. \n\r", speedtest_stop());         		
		if ( DEBUG == 1 )      speedtest_start(); //time start


		//in this place need to unpack signals from frame
		if ( frame_unpack(signal_parser_buf,tst) < 0){
			//printf ("ERROR UNPACK! \n\r");
			printf(">>>>ERROR FRAME UNPACK! RECIVED^{%s} \n\r",tst);
			break;
		}
		printf("=================== ==>   SPEEDTEST Time frame_unpack: [ %ld ] ms. \n\r", speedtest_stop());         
		if ( DEBUG == 1 )	speedtest_start(); //time start					

		//if ( DEBUG == 1 ) 

		printf(">>>>RECIVED^{%s} \n\r",tst);
		//printf ("\n\r FRAME_UNPACK: \n\r %s\n\r",tst);
		//Data_to_sName (signal_parser_buf);     	            // explode signals by delimiter ";"	  and copy to Signal.Name[]
		if ( DEBUG == 1 ) speedtest_start(); //time start
		Data_to_sName (tst);		
		memset(signal_parser_buf, 0, sizeof(signal_parser_buf));
		memset(tst, 0, sizeof(tst));

		if ( DEBUG == 1 ) printf("=================== ==>   SPEEDTEST Time load Data_to_sName: [ %ld ] ms. \n\r", speedtest_stop());           	        
		if ( DEBUG == 1 ) speedtest_start(); //time start //deserial test  	         

		int z=0;		
		int id=-1;
		int wr=0;

		//FillSignalIndex(); //fill the index of loaded  signals

		if ( DEBUG == 1 )        printf("\n\r ================================ *UNPACK signals* ====================================\n\r");	        
		for (z=0; z < MAX_Signals; z++) {
			//////	              printf(" \n\r |Signal FIELDS BEFORE parser: Name{%s} Val0[%i]  Val1[%i]| \n\r",Signal_Array[z].Name, Signal_Array[z].Value[0] , Signal_Array[z].Value[1]); //DEBUG
			int test=0;	            
			char buffer[350]={0};
			printf("START SEND_ID[%i]=%i \n\r",z,Send_ID[z]);
			strcpy (buffer, Signal_Array[z].Name);
			if (strstr(Signal_Array[z].Name,"485.kb.key.start_hydratation")!=NULL ) printf("\n\r NAME{%s} Val{%i} Ex[%i] \n\r",Signal_Array[z].Name,Signal_Array[z].Value[1],Signal_Array[z].ExState);
			test = unpack_signal(buffer  ,z); //from buffer to signal with number Z
			if (strstr(Signal_Array[z].Name,"485.kb.key.start_hydratation")!=NULL ) printf("\n\r NAME{%s} Val{%i} Ex[%i] \n\r",Signal_Array[z].Name,Signal_Array[z].Value[1],Signal_Array[z].ExState);
			if (DEBUG == 1)  printf ("FROM SRV ->> [#%i]  Name:[%s]   Val:[%i]     Ex[%i] \n\r",z,Signal_Array[z].Name,Signal_Array[z].Value[1],Signal_Array[z].ExState);	                    
			Signal_Array[z].Srv_id_num = z;

			if(Signal_Array[z].Name[0] == 0) {
				break;
			}

			if(!hash_inited) {
				hash_add(name_hash, Signal_Array, z);
				hash_add_by_prefix(prefix_hash, Signal_Array, z);
			}

			// if ((Signal_Array[z].ExState == 0)  || (Signal_Array[z].ExState > 2) ) {
			//       RqTCPSend=1;
			//      }

		} //end  unpack

		hash_inited = 1;

		if ( DEBUG == 1 )        printf(" ================================ *** ====================================\n\r");    		    

		if ( DEBUG == 1 )        printf(" ==>   SPEEDTEST Deserial signals signals: [ %ld ] ms. \n\r", speedtest_stop());     


		/////////////////////////////////////////////////////// COMMAND/////////////////////////////////////////////////////////////

		if ( DEBUG == 1 )    printf("=================== ==>  START SWITCH ============================= \n\r");         
		if ( DEBUG == 1 )    speedtest_start(); //time start

		STATE = get_state();

		z=0;
		int hydr=0;

		struct hash_item_s *item;
		struct Signal *s;

		if ( DEBUG == 1 ) printf("\n\rAnalyzing state\n\r");

		switch (STATE){
			case 0:  //INIT
				if ( DEBUG == 1 ) printf("\n\r++++++++++++++++++++++++++++++>>>>MODE INIT\n\r");
				item = hash_find_by_prefix(prefix_hash, "wago.");
				while(item) {
					Set_Signal_Ex(item->idx, RD); //read wago	                               
					item = item->next;
				}
				item = hash_find_by_prefix(prefix_hash, "485.");
				while(item) {
					Set_Signal_Ex(item->idx, RD); //read keyboard
					item = item->next;
				}
				// printf ("CASE -> Send_ID{%i}=%i \n\r",z,Send_ID[z]);
				//Send_ID[z]=1;
				break;         

			case 1:  //INIT
				break;


			case 2:  //RESET 
				break;	               


			case 31:  //WORK mestno
				Set_Signal_Ex_Val("485.rsrs.rm_u1_on1", WR,1); //write bit
				Set_Signal_Ex_Val("485.rsrs.rm_u2_on2", WR,1); //write bit

				//if (sTrigger_Ex (z, "485.kb.key.start_hydratation", OK ) && sTrigger_Val (z, "485.kb.key.start_hydratation", 1 ) ) // start Hydratation
				if ((strstr(Signal_Array[z].Name,"485.kb.key.start_hydratation")!=NULL)&&(Signal_Array[z].Value[1]==1))
				{
					// if ( DEBUG == 1 )     printf("\n\r====================================================>>>>START Hydrotation\n\r");	                                   	                                    
					SetVal("485.rsrs2.state_sound2_led",1,WR); //Sound Warning2	                                     	                                     	                               
					SetVal("485.rsrs2.state_sound1_led",1,WR); //Sound Warning1	                   	                                                                                       	                                    
					hydr=1;
				}


				if (hydr==1)
				{
					if ( DEBUG == 1 )  printf("\n\r=============================>>>>START hydr\n\r");	                                   
					//SetVal("wago.oc_mdo1.ka",1,WR); //hydro	                                      
					SetVal("485.rsrs2.state_sound2_led",1,WR); //Sound Warning2	                                     	                                     	                               
					SetVal("485.rsrs2.state_sound1_led",1,WR); //Sound Warning1	                   	                                                                                       
					SetVal("wago.oc_mdo1.ka7_1",1,WR); //KOntaktor QF1
					SetVal("wago.oc_mdo1.ka4_1",1,WR); //Hydro pump M5	                                     
					SetVal("wago.oc_mdo1.woter1",1,WR); //hydro

				}

				item = hash_find_by_prefix(prefix_hash, "485.");
				while(item) {
					if(strncmp(Signal_Array[item->idx].Name, "485.kb.", 7) == 0)
						Set_Signal_Ex (item->idx, RD); //cmd read keyboard modbus device and put result signals in Signal_Array            
					item = item->next;
				}

				break;

			case 32:  //WORK provod
				if ( DEBUG == 1 )    printf("\n\r++++++++++++++++++++++++++++++>>>>MODE WORK PROVOD\n\r");


				break;

			case 33:  //WORK radio
				if ( DEBUG == 1 )   printf("\n\r++++++++++++++++++++++++++++++>>>>MODE WORK RADIO\n\r");

				break;

			case 4:  //STOP 
				if ( DEBUG == 1 )  printf("\n\r++++++++++++++++++++++++++++++>>>>MODE SOTP !!!!!!!1\n\r");	                      
				break;

			case 5:  //DIAGNOSTIC
				if ( DEBUG == 1 )  printf("\n\r++++++++++++++++++++++++++++++>>>>MODE DIAGNOSTIC !!!!!!!1\n\r");	                                                    
				break;

			case 6:  //ERROR 
				if ( DEBUG == 1 )  printf("\n\r++++++++++++++++++++++++++++++>>>>MODE ERROR !!!!!!!1\n\r");	                                                    
				break;

			default:  //DEFAULT
				if ( DEBUG == 1 )    printf("default state \n\r");  
				//STATE = get_state();
		} //end switch
		if ( DEBUG == 1 ) printf("\n\rAnalyzing state done\n\r");

		////////////////////////=========  SEND all signals to TCPCache =======//////////////////////////////////////

		if ( DEBUG == 1 )  speedtest_start ();       //time start
		int x = 0;
		//     socket_init();
		memset(message, 0, sizeof(message));     //erase buffer
		//printf("1Must be empty buffer - MESSAGE:[%s] \n\r",message);
		char tmpz[150]={0};
		int Send_Ready=0;
		for (x = 0; x < MAX_Signals; x++)
		{
			if (Signal_Array[x].Name[0] == 0)  //write if Name not empty
			{ 
				break;
			}
			// memset(packed_txt_string, 0, sizeof(packed_txt_string));
			// printf("Founded Name:[%s] \n\r",Signal_Array[x].Name);
			//Ex == 1 or Ex == 2
			printf ("Send_ID{%i}=%i \n\r",x,Send_ID[x]);
			if (Send_ID[x]){                
				pack_signal (x, tmpz);
				strcat (message, tmpz);                 
				Send_Ready=1;
			}

			Send_ID[x]=0;
			//else
			//break;              // signals list is end
		}
		if (Send_Ready == 1){
			if ( DEBUG == 1 )   printf("=================== ==>  Buffer assembly TIME: [ %ld ] ms. \n\r", speedtest_stop());         
			if ( DEBUG == 1 )   speedtest_start ();       //time start
			memset(tst, 0, sizeof(tst));
			frame_pack ("wr", message, tst);
			if ( DEBUG == 1 )  printf("=================== ==>  Calculate PACK TIME: [ %ld ] ms. \n\r", speedtest_stop());         
			if ( DEBUG == 1 )  speedtest_start ();       //time start
			tcpresult = frame_tcpreq (tst);
			if (DEBUG == 1) printf ("\n\r SEND TST^[%s] \n\r", tst);
			if ( DEBUG == 1 )  printf ("Status of TCP SEND: [%i]\n\r", tcpresult);
			//tcpsignal_packet_write(message);
			printf("Send to TCPCache:[%s] \n\r",tst);
			//break;
		}

		printf("=================== ==>  Calculate TCP SEND to SRV TIME: [ %ld ] ms. \n\r", speedtest_stop());         

		if ( DEBUG == 1 )    printf("end iteration.. \n\r");     
	}

	//*************CLOSE SOCKET***************
	socket_close();


	return 0;
}
